openapi: 3.0.3
info:
  title: CryptoExchange Authentication & Login API
  description: API endpoints for user authentication and login flows including OAuth, password-based login, and MFA validation
  version: 1.0.0
  contact:
    name: CryptoExchange API Support
    url: https://app.cryptoexchange.com

servers:
  - url: https://api.cryptoexchange.com
    description: Production server

paths:
  /api/v1/auth/login:
    post:
      summary: Authenticate User with Password
      description: Authenticate a user using email/password credentials
      tags:
        - Password Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - identifier
                - password
                - client_info
              properties:
                identifier:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  example: "SecurePassword123!"
                client_info:
                  $ref: '#/components/schemas/ClientInfo'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login/username:
    post:
      summary: Login with Username
      description: Authenticate a user using username/password credentials
      tags:
        - Password Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - client_info
              properties:
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  example: "SecurePassword123!"
                client_info:
                  $ref: '#/components/schemas/ClientInfo'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/oauth/initiate:
    post:
      summary: Initiate OAuth Request
      description: Start OAuth authentication flow with supported providers
      tags:
        - OAuth Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
                - redirect_uri
                - scopes
                - client_type
              properties:
                provider:
                  type: string
                  enum: [google, github]
                  example: "google"
                redirect_uri:
                  type: string
                  format: uri
                  example: "https://app.cryptoexchange.com/auth/callback"
                scopes:
                  type: array
                  items:
                    type: string
                  example: ["email", "profile"]
                client_type:
                  type: string
                  enum: [web, mobile]
                  example: "web"
      responses:
        '200':
          description: OAuth initiation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthInitiateResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/oauth/callback:
    post:
      summary: Handle OAuth Callback
      description: Process OAuth callback with authorization code
      tags:
        - OAuth Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - provider
                - code
                - state
                - redirect_uri
              properties:
                provider:
                  type: string
                  enum: [google, github]
                  example: "google"
                code:
                  type: string
                  example: "authorization_code_from_provider"
                state:
                  type: string
                  example: "550e8400-e29b-41d4-a716-446655440001"
                redirect_uri:
                  type: string
                  format: uri
                  example: "https://app.cryptoexchange.com/auth/callback"
      responses:
        '200':
          description: OAuth callback processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthCallbackResponse'
        '400':
          description: Invalid OAuth state or code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/mfa/webauthn/challenge:
    post:
      summary: Initiate Hardware Key Challenge
      description: Start WebAuthn/FIDO2 hardware key authentication challenge
      tags:
        - MFA Validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - session_token
              properties:
                user_id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440010"
                session_token:
                  type: string
                  example: "temp_session_abc123"
      responses:
        '200':
          description: WebAuthn challenge created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebAuthnChallengeResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/mfa/webauthn/verify:
    post:
      summary: Verify Hardware Key Response
      description: Verify WebAuthn/FIDO2 hardware key authentication response
      tags:
        - MFA Validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - challenge_id
                - credential
              properties:
                challenge_id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440021"
                credential:
                  $ref: '#/components/schemas/WebAuthnCredential'
      responses:
        '200':
          description: WebAuthn verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAVerificationResponse'
        '400':
          description: WebAuthn verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/mfa/biometric/challenge:
    post:
      summary: Initiate Biometric Challenge
      description: Start biometric authentication challenge
      tags:
        - MFA Validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - session_token
              properties:
                user_id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440010"
                session_token:
                  type: string
                  example: "temp_session_abc123"
      responses:
        '200':
          description: Biometric challenge created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BiometricChallengeResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/mfa/biometric/verify:
    post:
      summary: Verify Biometric Response
      description: Verify biometric authentication response
      tags:
        - MFA Validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - challenge_id
                - credential
              properties:
                challenge_id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440024"
                credential:
                  $ref: '#/components/schemas/WebAuthnCredential'
      responses:
        '200':
          description: Biometric verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAVerificationResponse'
        '400':
          description: Biometric verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/mfa/totp/verify:
    post:
      summary: Verify TOTP Code
      description: Verify Time-based One-Time Password (TOTP) code
      tags:
        - MFA Validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - session_token
                - totp_code
              properties:
                user_id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440010"
                session_token:
                  type: string
                  example: "temp_session_abc123"
                totp_code:
                  type: string
                  pattern: "^[0-9]{6}$"
                  example: "123456"
      responses:
        '200':
          description: TOTP verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAVerificationResponse'
        '400':
          description: Invalid TOTP code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/mfa/backup-code/verify:
    post:
      summary: Verify Backup Code
      description: Verify MFA backup code
      tags:
        - MFA Validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - session_token
                - backup_code
              properties:
                user_id:
                  type: string
                  format: uuid
                  example: "550e8400-e29b-41d4-a716-446655440010"
                session_token:
                  type: string
                  example: "temp_session_abc123"
                backup_code:
                  type: string
                  pattern: "^[A-Z0-9]{6}-[A-Z0-9]{6}$"
                  example: "ABC123-DEF456"
      responses:
        '200':
          description: Backup code verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupCodeVerificationResponse'
        '400':
          description: Invalid backup code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ClientInfo:
      type: object
      required:
        - ip_address
        - user_agent
      properties:
        ip_address:
          type: string
          format: ipv4
          example: "192.168.1.1"
        user_agent:
          type: string
          example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        device_id:
          type: string
          example: "device_fingerprint_abc123"

    User:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440010"
        alias:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        email_verified:
          type: boolean
          example: true
        status:
          type: string
          enum: [Active, Unverified, Suspended]
          example: "Active"
        mfa_enabled:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: "2024-06-24T12:00:00Z"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440010"
            session_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440011"
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expires_at:
              type: string
              format: date-time
              example: "2024-06-24T13:00:00Z"
            user:
              $ref: '#/components/schemas/User'
            requires_mfa:
              type: boolean
              example: false

    OAuthInitiateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            request_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440000"
            authorization_url:
              type: string
              format: uri
              example: "https://accounts.google.com/oauth/authorize?client_id=...&state=abc123&redirect_uri=..."
            state:
              type: string
              example: "550e8400-e29b-41d4-a716-446655440001"
            expires_at:
              type: string
              format: date-time
              example: "2024-06-24T12:15:00Z"

    OAuthCallbackResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440002"
            session_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440003"
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expires_at:
              type: string
              format: date-time
              example: "2024-06-24T13:00:00Z"
            user:
              $ref: '#/components/schemas/User'
            is_new_user:
              type: boolean
              example: false

    WebAuthnPublicKey:
      type: object
      properties:
        challenge:
          type: string
          example: "base64-encoded-challenge"
        timeout:
          type: integer
          example: 60000
        rpId:
          type: string
          example: "cryptoexchange.com"
        allowCredentials:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: "base64-credential-id"
              type:
                type: string
                enum: [public-key]
                example: "public-key"
        userVerification:
          type: string
          enum: [required, preferred, discouraged]
          example: "preferred"

    WebAuthnChallengeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            challenge_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440021"
            publicKey:
              $ref: '#/components/schemas/WebAuthnPublicKey'
            expires_at:
              type: string
              format: date-time
              example: "2024-06-24T12:05:00Z"

    BiometricChallengeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            challenge_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440024"
            publicKey:
              allOf:
                - $ref: '#/components/schemas/WebAuthnPublicKey'
                - type: object
                  properties:
                    userVerification:
                      type: string
                      enum: [required]
                      example: "required"
            expires_at:
              type: string
              format: date-time
              example: "2024-06-24T12:05:00Z"

    WebAuthnCredential:
      type: object
      required:
        - id
        - rawId
        - response
        - type
      properties:
        id:
          type: string
          example: "base64-credential-id"
        rawId:
          type: string
          example: "base64-raw-id"
        response:
          type: object
          properties:
            authenticatorData:
              type: string
              example: "base64-authenticator-data"
            clientDataJSON:
              type: string
              example: "base64-client-data"
            signature:
              type: string
              example: "base64-signature"
        type:
          type: string
          enum: [public-key]
          example: "public-key"

    MFAVerificationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            verification_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440022"
            verified_at:
              type: string
              format: date-time
              example: "2024-06-24T12:03:00Z"
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            session_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440023"

    BackupCodeVerificationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            verification_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440029"
            verified_at:
              type: string
              format: date-time
              example: "2024-06-24T12:03:00Z"
            backup_code_used:
              type: string
              example: "ABC123-DEF456"
            remaining_codes:
              type: integer
              example: 4
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            session_id:
              type: string
              format: uuid
              example: "550e8400-e29b-41d4-a716-446655440030"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "INVALID_CREDENTIALS"
            message:
              type: string
              example: "Email or password is incorrect"
            details:
              type: object
              additionalProperties: true

tags:
  - name: Password Authentication
    description: Traditional email/username and password authentication
  - name: OAuth Authentication
    description: Third-party OAuth provider authentication flows
  - name: MFA Validation
    description: Multi-factor authentication validation endpoints